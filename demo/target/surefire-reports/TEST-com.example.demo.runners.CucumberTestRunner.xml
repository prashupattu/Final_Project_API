<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.example.demo.runners.CucumberTestRunner" time="13.235" tests="25" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="21"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="C:\Users\Prashanth\Downloads\demo (7)\demo\target\test-classes;C:\Users\Prashanth\Downloads\demo (7)\demo\target\classes;C:\Users\Prashanth\.m2\repository\org\springframework\boot\spring-boot-starter\3.5.5\spring-boot-starter-3.5.5.jar;C:\Users\Prashanth\.m2\repository\org\springframework\boot\spring-boot\3.5.5\spring-boot-3.5.5.jar;C:\Users\Prashanth\.m2\repository\org\springframework\spring-context\6.2.10\spring-context-6.2.10.jar;C:\Users\Prashanth\.m2\repository\org\springframework\spring-aop\6.2.10\spring-aop-6.2.10.jar;C:\Users\Prashanth\.m2\repository\org\springframework\spring-beans\6.2.10\spring-beans-6.2.10.jar;C:\Users\Prashanth\.m2\repository\org\springframework\spring-expression\6.2.10\spring-expression-6.2.10.jar;C:\Users\Prashanth\.m2\repository\io\micrometer\micrometer-observation\1.15.3\micrometer-observation-1.15.3.jar;C:\Users\Prashanth\.m2\repository\io\micrometer\micrometer-commons\1.15.3\micrometer-commons-1.15.3.jar;C:\Users\Prashanth\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.5.5\spring-boot-autoconfigure-3.5.5.jar;C:\Users\Prashanth\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.5.5\spring-boot-starter-logging-3.5.5.jar;C:\Users\Prashanth\.m2\repository\ch\qos\logback\logback-classic\1.5.18\logback-classic-1.5.18.jar;C:\Users\Prashanth\.m2\repository\ch\qos\logback\logback-core\1.5.18\logback-core-1.5.18.jar;C:\Users\Prashanth\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.24.3\log4j-to-slf4j-2.24.3.jar;C:\Users\Prashanth\.m2\repository\org\apache\logging\log4j\log4j-api\2.24.3\log4j-api-2.24.3.jar;C:\Users\Prashanth\.m2\repository\org\slf4j\jul-to-slf4j\2.0.17\jul-to-slf4j-2.0.17.jar;C:\Users\Prashanth\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\Prashanth\.m2\repository\org\springframework\spring-core\6.2.10\spring-core-6.2.10.jar;C:\Users\Prashanth\.m2\repository\org\springframework\spring-jcl\6.2.10\spring-jcl-6.2.10.jar;C:\Users\Prashanth\.m2\repository\org\yaml\snakeyaml\2.4\snakeyaml-2.4.jar;C:\Users\Prashanth\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.5.5\spring-boot-starter-test-3.5.5.jar;C:\Users\Prashanth\.m2\repository\org\springframework\boot\spring-boot-test\3.5.5\spring-boot-test-3.5.5.jar;C:\Users\Prashanth\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.5.5\spring-boot-test-autoconfigure-3.5.5.jar;C:\Users\Prashanth\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\Prashanth\.m2\repository\org\slf4j\slf4j-api\2.0.17\slf4j-api-2.0.17.jar;C:\Users\Prashanth\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.2\jakarta.xml.bind-api-4.0.2.jar;C:\Users\Prashanth\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.3\jakarta.activation-api-2.1.3.jar;C:\Users\Prashanth\.m2\repository\net\minidev\json-smart\2.5.2\json-smart-2.5.2.jar;C:\Users\Prashanth\.m2\repository\net\minidev\accessors-smart\2.5.2\accessors-smart-2.5.2.jar;C:\Users\Prashanth\.m2\repository\org\ow2\asm\asm\9.7.1\asm-9.7.1.jar;C:\Users\Prashanth\.m2\repository\org\assertj\assertj-core\3.27.4\assertj-core-3.27.4.jar;C:\Users\Prashanth\.m2\repository\net\bytebuddy\byte-buddy\1.17.7\byte-buddy-1.17.7.jar;C:\Users\Prashanth\.m2\repository\org\awaitility\awaitility\4.2.2\awaitility-4.2.2.jar;C:\Users\Prashanth\.m2\repository\org\hamcrest\hamcrest\3.0\hamcrest-3.0.jar;C:\Users\Prashanth\.m2\repository\org\mockito\mockito-core\5.17.0\mockito-core-5.17.0.jar;C:\Users\Prashanth\.m2\repository\net\bytebuddy\byte-buddy-agent\1.17.7\byte-buddy-agent-1.17.7.jar;C:\Users\Prashanth\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\Prashanth\.m2\repository\org\mockito\mockito-junit-jupiter\5.17.0\mockito-junit-jupiter-5.17.0.jar;C:\Users\Prashanth\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.12.2\junit-jupiter-api-5.12.2.jar;C:\Users\Prashanth\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\Prashanth\.m2\repository\org\junit\platform\junit-platform-commons\1.12.2\junit-platform-commons-1.12.2.jar;C:\Users\Prashanth\.m2\repository\org\skyscreamer\jsonassert\1.5.3\jsonassert-1.5.3.jar;C:\Users\Prashanth\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\Prashanth\.m2\repository\org\springframework\spring-test\6.2.10\spring-test-6.2.10.jar;C:\Users\Prashanth\.m2\repository\org\xmlunit\xmlunit-core\2.10.3\xmlunit-core-2.10.3.jar;C:\Users\Prashanth\.m2\repository\io\rest-assured\rest-assured\5.5.0\rest-assured-5.5.0.jar;C:\Users\Prashanth\.m2\repository\org\apache\groovy\groovy\4.0.28\groovy-4.0.28.jar;C:\Users\Prashanth\.m2\repository\org\apache\groovy\groovy-xml\4.0.28\groovy-xml-4.0.28.jar;C:\Users\Prashanth\.m2\repository\org\apache\httpcomponents\httpclient\4.5.13\httpclient-4.5.13.jar;C:\Users\Prashanth\.m2\repository\org\apache\httpcomponents\httpcore\4.4.16\httpcore-4.4.16.jar;C:\Users\Prashanth\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar;C:\Users\Prashanth\.m2\repository\commons-codec\commons-codec\1.18.0\commons-codec-1.18.0.jar;C:\Users\Prashanth\.m2\repository\org\apache\httpcomponents\httpmime\4.5.13\httpmime-4.5.13.jar;C:\Users\Prashanth\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar;C:\Users\Prashanth\.m2\repository\io\rest-assured\json-path\5.5.6\json-path-5.5.6.jar;C:\Users\Prashanth\.m2\repository\org\apache\groovy\groovy-json\4.0.28\groovy-json-4.0.28.jar;C:\Users\Prashanth\.m2\repository\io\rest-assured\rest-assured-common\5.5.6\rest-assured-common-5.5.6.jar;C:\Users\Prashanth\.m2\repository\io\rest-assured\xml-path\5.5.6\xml-path-5.5.6.jar;C:\Users\Prashanth\.m2\repository\org\apache\commons\commons-lang3\3.17.0\commons-lang3-3.17.0.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\cucumber-java\7.18.1\cucumber-java-7.18.1.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\cucumber-core\7.18.1\cucumber-core-7.18.1.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\cucumber-gherkin\7.18.1\cucumber-gherkin-7.18.1.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\cucumber-gherkin-messages\7.18.1\cucumber-gherkin-messages-7.18.1.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\gherkin\28.0.0\gherkin-28.0.0.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\messages\24.1.0\messages-24.1.0.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\testng-xml-formatter\0.2.0\testng-xml-formatter-0.2.0.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\query\12.2.0\query-12.2.0.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\tag-expressions\6.1.0\tag-expressions-6.1.0.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\cucumber-expressions\17.1.0\cucumber-expressions-17.1.0.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\datatable\7.18.1\datatable-7.18.1.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\cucumber-plugin\7.18.1\cucumber-plugin-7.18.1.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\docstring\7.18.1\docstring-7.18.1.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\html-formatter\21.4.1\html-formatter-21.4.1.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\junit-xml-formatter\0.5.0\junit-xml-formatter-0.5.0.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\ci-environment\10.0.1\ci-environment-10.0.1.jar;C:\Users\Prashanth\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\cucumber-junit\7.18.1\cucumber-junit-7.18.1.jar;C:\Users\Prashanth\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\Prashanth\.m2\repository\org\hamcrest\hamcrest-core\3.0\hamcrest-core-3.0.jar;"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="https://java.oracle.com/"/>
    <property name="user.timezone" value="Asia/Calcutta"/>
    <property name="os.name" value="Windows 11"/>
    <property name="java.vm.specification.version" value="21"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="IN"/>
    <property name="sun.boot.library.path" value="C:\Program Files\Java\jdk-21\bin"/>
    <property name="sun.java.command" value="C:\Users\Prashanth\AppData\Local\Temp\surefire13164161636152479781\surefirebooter-20250901215413393_3.jar C:\Users\Prashanth\AppData\Local\Temp\surefire13164161636152479781 2025-09-01T21-54-13_289-jvmRun1 surefire-20250901215413393_1tmp surefire_0-20250901215413393_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="C:\Users\Prashanth\Downloads\demo (7)\demo\target\test-classes;C:\Users\Prashanth\Downloads\demo (7)\demo\target\classes;C:\Users\Prashanth\.m2\repository\org\springframework\boot\spring-boot-starter\3.5.5\spring-boot-starter-3.5.5.jar;C:\Users\Prashanth\.m2\repository\org\springframework\boot\spring-boot\3.5.5\spring-boot-3.5.5.jar;C:\Users\Prashanth\.m2\repository\org\springframework\spring-context\6.2.10\spring-context-6.2.10.jar;C:\Users\Prashanth\.m2\repository\org\springframework\spring-aop\6.2.10\spring-aop-6.2.10.jar;C:\Users\Prashanth\.m2\repository\org\springframework\spring-beans\6.2.10\spring-beans-6.2.10.jar;C:\Users\Prashanth\.m2\repository\org\springframework\spring-expression\6.2.10\spring-expression-6.2.10.jar;C:\Users\Prashanth\.m2\repository\io\micrometer\micrometer-observation\1.15.3\micrometer-observation-1.15.3.jar;C:\Users\Prashanth\.m2\repository\io\micrometer\micrometer-commons\1.15.3\micrometer-commons-1.15.3.jar;C:\Users\Prashanth\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.5.5\spring-boot-autoconfigure-3.5.5.jar;C:\Users\Prashanth\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.5.5\spring-boot-starter-logging-3.5.5.jar;C:\Users\Prashanth\.m2\repository\ch\qos\logback\logback-classic\1.5.18\logback-classic-1.5.18.jar;C:\Users\Prashanth\.m2\repository\ch\qos\logback\logback-core\1.5.18\logback-core-1.5.18.jar;C:\Users\Prashanth\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.24.3\log4j-to-slf4j-2.24.3.jar;C:\Users\Prashanth\.m2\repository\org\apache\logging\log4j\log4j-api\2.24.3\log4j-api-2.24.3.jar;C:\Users\Prashanth\.m2\repository\org\slf4j\jul-to-slf4j\2.0.17\jul-to-slf4j-2.0.17.jar;C:\Users\Prashanth\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\Prashanth\.m2\repository\org\springframework\spring-core\6.2.10\spring-core-6.2.10.jar;C:\Users\Prashanth\.m2\repository\org\springframework\spring-jcl\6.2.10\spring-jcl-6.2.10.jar;C:\Users\Prashanth\.m2\repository\org\yaml\snakeyaml\2.4\snakeyaml-2.4.jar;C:\Users\Prashanth\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.5.5\spring-boot-starter-test-3.5.5.jar;C:\Users\Prashanth\.m2\repository\org\springframework\boot\spring-boot-test\3.5.5\spring-boot-test-3.5.5.jar;C:\Users\Prashanth\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.5.5\spring-boot-test-autoconfigure-3.5.5.jar;C:\Users\Prashanth\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\Prashanth\.m2\repository\org\slf4j\slf4j-api\2.0.17\slf4j-api-2.0.17.jar;C:\Users\Prashanth\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.2\jakarta.xml.bind-api-4.0.2.jar;C:\Users\Prashanth\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.3\jakarta.activation-api-2.1.3.jar;C:\Users\Prashanth\.m2\repository\net\minidev\json-smart\2.5.2\json-smart-2.5.2.jar;C:\Users\Prashanth\.m2\repository\net\minidev\accessors-smart\2.5.2\accessors-smart-2.5.2.jar;C:\Users\Prashanth\.m2\repository\org\ow2\asm\asm\9.7.1\asm-9.7.1.jar;C:\Users\Prashanth\.m2\repository\org\assertj\assertj-core\3.27.4\assertj-core-3.27.4.jar;C:\Users\Prashanth\.m2\repository\net\bytebuddy\byte-buddy\1.17.7\byte-buddy-1.17.7.jar;C:\Users\Prashanth\.m2\repository\org\awaitility\awaitility\4.2.2\awaitility-4.2.2.jar;C:\Users\Prashanth\.m2\repository\org\hamcrest\hamcrest\3.0\hamcrest-3.0.jar;C:\Users\Prashanth\.m2\repository\org\mockito\mockito-core\5.17.0\mockito-core-5.17.0.jar;C:\Users\Prashanth\.m2\repository\net\bytebuddy\byte-buddy-agent\1.17.7\byte-buddy-agent-1.17.7.jar;C:\Users\Prashanth\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\Prashanth\.m2\repository\org\mockito\mockito-junit-jupiter\5.17.0\mockito-junit-jupiter-5.17.0.jar;C:\Users\Prashanth\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.12.2\junit-jupiter-api-5.12.2.jar;C:\Users\Prashanth\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\Prashanth\.m2\repository\org\junit\platform\junit-platform-commons\1.12.2\junit-platform-commons-1.12.2.jar;C:\Users\Prashanth\.m2\repository\org\skyscreamer\jsonassert\1.5.3\jsonassert-1.5.3.jar;C:\Users\Prashanth\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\Prashanth\.m2\repository\org\springframework\spring-test\6.2.10\spring-test-6.2.10.jar;C:\Users\Prashanth\.m2\repository\org\xmlunit\xmlunit-core\2.10.3\xmlunit-core-2.10.3.jar;C:\Users\Prashanth\.m2\repository\io\rest-assured\rest-assured\5.5.0\rest-assured-5.5.0.jar;C:\Users\Prashanth\.m2\repository\org\apache\groovy\groovy\4.0.28\groovy-4.0.28.jar;C:\Users\Prashanth\.m2\repository\org\apache\groovy\groovy-xml\4.0.28\groovy-xml-4.0.28.jar;C:\Users\Prashanth\.m2\repository\org\apache\httpcomponents\httpclient\4.5.13\httpclient-4.5.13.jar;C:\Users\Prashanth\.m2\repository\org\apache\httpcomponents\httpcore\4.4.16\httpcore-4.4.16.jar;C:\Users\Prashanth\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar;C:\Users\Prashanth\.m2\repository\commons-codec\commons-codec\1.18.0\commons-codec-1.18.0.jar;C:\Users\Prashanth\.m2\repository\org\apache\httpcomponents\httpmime\4.5.13\httpmime-4.5.13.jar;C:\Users\Prashanth\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar;C:\Users\Prashanth\.m2\repository\io\rest-assured\json-path\5.5.6\json-path-5.5.6.jar;C:\Users\Prashanth\.m2\repository\org\apache\groovy\groovy-json\4.0.28\groovy-json-4.0.28.jar;C:\Users\Prashanth\.m2\repository\io\rest-assured\rest-assured-common\5.5.6\rest-assured-common-5.5.6.jar;C:\Users\Prashanth\.m2\repository\io\rest-assured\xml-path\5.5.6\xml-path-5.5.6.jar;C:\Users\Prashanth\.m2\repository\org\apache\commons\commons-lang3\3.17.0\commons-lang3-3.17.0.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\cucumber-java\7.18.1\cucumber-java-7.18.1.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\cucumber-core\7.18.1\cucumber-core-7.18.1.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\cucumber-gherkin\7.18.1\cucumber-gherkin-7.18.1.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\cucumber-gherkin-messages\7.18.1\cucumber-gherkin-messages-7.18.1.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\gherkin\28.0.0\gherkin-28.0.0.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\messages\24.1.0\messages-24.1.0.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\testng-xml-formatter\0.2.0\testng-xml-formatter-0.2.0.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\query\12.2.0\query-12.2.0.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\tag-expressions\6.1.0\tag-expressions-6.1.0.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\cucumber-expressions\17.1.0\cucumber-expressions-17.1.0.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\datatable\7.18.1\datatable-7.18.1.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\cucumber-plugin\7.18.1\cucumber-plugin-7.18.1.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\docstring\7.18.1\docstring-7.18.1.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\html-formatter\21.4.1\html-formatter-21.4.1.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\junit-xml-formatter\0.5.0\junit-xml-formatter-0.5.0.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\ci-environment\10.0.1\ci-environment-10.0.1.jar;C:\Users\Prashanth\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\Prashanth\.m2\repository\io\cucumber\cucumber-junit\7.18.1\cucumber-junit-7.18.1.jar;C:\Users\Prashanth\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\Prashanth\.m2\repository\org\hamcrest\hamcrest-core\3.0\hamcrest-core-3.0.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\Prashanth"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-07-15"/>
    <property name="java.home" value="C:\Program Files\Java\jdk-21"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="C:\Users\Prashanth\Downloads\demo (7)\demo"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="surefire.real.class.path" value="C:\Users\Prashanth\AppData\Local\Temp\surefire13164161636152479781\surefirebooter-20250901215413393_3.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="21.0.8+12-LTS-250"/>
    <property name="user.name" value="Prashanth"/>
    <property name="stdout.encoding" value="Cp1252"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="localRepository" value="C:\Users\Prashanth\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="C:\Users\PRASHA~1\AppData\Local\Temp\"/>
    <property name="java.version" value="21.0.8"/>
    <property name="user.dir" value="C:\Users\Prashanth\Downloads\demo (7)\demo"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="native.encoding" value="Cp1252"/>
    <property name="java.library.path" value="C:\Program Files\Java\jdk-21\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Java\jdk-19\bin;C:\;C:\Program Files\dotnet\;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files\Git\cmd;C:\apache-maven-3.9.9\bin;C:\Program Files\MySQL\MySQL Utilities 1.6\;C:\flutter\bin;C:\Users\Prashanth\AppData\Local\Programs\Python\Python312\Scripts\;C:\Users\Prashanth\AppData\Local\Programs\Python\Python312\;C:\Users\Prashanth\AppData\Local\Programs\Python\Python310\Scripts\;C:\Users\Prashanth\AppData\Local\Programs\Python\Python310\;C:\Users\Prashanth\AppData\Local\Microsoft\WindowsApps;C:\Microsoft VS Code\bin;C:\Users\Prashanth\AppData\Roaming\npm;C:\Users\Prashanth\AppData\Local\GitHubDesktop\bin;."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="Cp1252"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="21.0.8+12-LTS-250"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="65.0"/>
  </properties>
  <testcase name="Get all albums" classname="Albums API" time="1.98">
    <system-out><![CDATA[
Scenario: Get all albums                                           # src/test/resources/features/albums.feature:6
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a GET request to "/albums"                           # com.example.demo.steps.ApiStepDefinitions.i_send_a_get_request_to(java.lang.String)
  Then the response status code should be 200                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
  And the response should contain 100 items                        # com.example.demo.steps.ApiStepDefinitions.the_response_should_contain_items(java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Get album by valid ID" classname="Albums API" time="2.658">
    <system-out><![CDATA[
Scenario: Get album by valid ID                                    # src/test/resources/features/albums.feature:11
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a GET request to "/albums/1"                         # com.example.demo.steps.ApiStepDefinitions.i_send_a_get_request_to(java.lang.String)
  Then the response status code should be 200                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
  And the field "id" should equal 1                                # com.example.demo.steps.ApiStepDefinitions.the_field_should_equal_int(java.lang.String,java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Get album by invalid ID" classname="Albums API" time="0.1">
    <system-out><![CDATA[
Scenario: Get album by invalid ID                                  # src/test/resources/features/albums.feature:16
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a GET request to "/albums/9999"                      # com.example.demo.steps.ApiStepDefinitions.i_send_a_get_request_to(java.lang.String)
  Then the response status code should be 404                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Get all comments" classname="Comments API" time="0.159">
    <system-out><![CDATA[
Scenario: Get all comments                                         # src/test/resources/features/comments.feature:6
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a GET request to "/comments"                         # com.example.demo.steps.ApiStepDefinitions.i_send_a_get_request_to(java.lang.String)
  Then the response status code should be 200                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
  And the response should contain 500 items                        # com.example.demo.steps.ApiStepDefinitions.the_response_should_contain_items(java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Get comments by valid postId" classname="Comments API" time="0.129">
    <system-out><![CDATA[
Scenario: Get comments by valid postId                             # src/test/resources/features/comments.feature:11
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a GET request to "/comments?postId=1"                # com.example.demo.steps.ApiStepDefinitions.i_send_a_get_request_to(java.lang.String)
  Then the response status code should be 200                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
  And every item should have "postId" equal to 1                   # com.example.demo.steps.ApiStepDefinitions.every_item_should_have_equal_to(java.lang.String,java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Get comments by invalid postId" classname="Comments API" time="0.734">
    <system-out><![CDATA[
Scenario: Get comments by invalid postId                           # src/test/resources/features/comments.feature:16
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a GET request to "/comments?postId=9999"             # com.example.demo.steps.ApiStepDefinitions.i_send_a_get_request_to(java.lang.String)
  Then the response status code should be 200                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
  And the response should contain 0 items                          # com.example.demo.steps.ApiStepDefinitions.the_response_should_contain_items(java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Get all photos" classname="Photos API" time="0.954">
    <system-out><![CDATA[
Scenario: Get all photos                                           # src/test/resources/features/photos.feature:6
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a GET request to "/photos"                           # com.example.demo.steps.ApiStepDefinitions.i_send_a_get_request_to(java.lang.String)
  Then the response status code should be 200                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
  And the response should contain 5000 items                       # com.example.demo.steps.ApiStepDefinitions.the_response_should_contain_items(java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Get photos by valid albumId" classname="Photos API" time="0.107">
    <system-out><![CDATA[
Scenario: Get photos by valid albumId                              # src/test/resources/features/photos.feature:11
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a GET request to "/photos?albumId=1"                 # com.example.demo.steps.ApiStepDefinitions.i_send_a_get_request_to(java.lang.String)
  Then the response status code should be 200                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
  And every item should have "albumId" equal to 1                  # com.example.demo.steps.ApiStepDefinitions.every_item_should_have_equal_to(java.lang.String,java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Get photos by invalid albumId" classname="Photos API" time="0.095">
    <system-out><![CDATA[
Scenario: Get photos by invalid albumId                            # src/test/resources/features/photos.feature:16
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a GET request to "/photos?albumId=9999"              # com.example.demo.steps.ApiStepDefinitions.i_send_a_get_request_to(java.lang.String)
  Then the response status code should be 200                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
  And the response should contain 0 items                          # com.example.demo.steps.ApiStepDefinitions.the_response_should_contain_items(java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Get all posts" classname="Posts API" time="0.1">
    <system-out><![CDATA[
Scenario: Get all posts                                            # src/test/resources/features/posts.feature:7
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a GET request to "/posts"                            # com.example.demo.steps.ApiStepDefinitions.i_send_a_get_request_to(java.lang.String)
  Then the response status code should be 200                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
  And the response should contain 100 items                        # com.example.demo.steps.ApiStepDefinitions.the_response_should_contain_items(java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Get a single post by ID" classname="Posts API" time="0.106">
    <system-out><![CDATA[
Scenario: Get a single post by ID                                  # src/test/resources/features/posts.feature:12
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a GET request to "/posts/1"                          # com.example.demo.steps.ApiStepDefinitions.i_send_a_get_request_to(java.lang.String)
  Then the response status code should be 200                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
  And the field "id" should equal 1                                # com.example.demo.steps.ApiStepDefinitions.the_field_should_equal_int(java.lang.String,java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Create a new post with valid data" classname="Posts API" time="0.841">
    <system-out><![CDATA[
Scenario: Create a new post with valid data                        # src/test/resources/features/posts.feature:17
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a POST request to "/posts" with body:                # com.example.demo.steps.ApiStepDefinitions.i_send_a_post_request_to_with_body(java.lang.String,java.lang.String)
  Then the response status code should be 201                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
  And the field "title" should equal "foo"                         # com.example.demo.steps.ApiStepDefinitions.the_field_should_equal_string(java.lang.String,java.lang.String)
  And the field "body" should equal "bar"                          # com.example.demo.steps.ApiStepDefinitions.the_field_should_equal_string(java.lang.String,java.lang.String)
  And the field "userId" should equal 1                            # com.example.demo.steps.ApiStepDefinitions.the_field_should_equal_int(java.lang.String,java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Create a new post with missing required field" classname="Posts API" time="0.804">
    <system-out><![CDATA[
Scenario: Create a new post with missing required field            # src/test/resources/features/posts.feature:32
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a POST request to "/posts" with body:                # com.example.demo.steps.ApiStepDefinitions.i_send_a_post_request_to_with_body(java.lang.String,java.lang.String)
  Then the response status code should be 201                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Update a post with valid ID using PUT" classname="Posts API" time="0.719">
    <system-out><![CDATA[
Scenario: Update a post with valid ID using PUT                    # src/test/resources/features/posts.feature:41
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a PUT request to "/posts/1" with body:               # com.example.demo.steps.ApiStepDefinitions.i_send_a_put_request_to_with_body(java.lang.String,java.lang.String)
  Then the response status code should be 200                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
  And the field "title" should equal "updated title"               # com.example.demo.steps.ApiStepDefinitions.the_field_should_equal_string(java.lang.String,java.lang.String)
]]></system-out>
  </testcase>
  <testcase name="Update a post with invalid ID using PUT" classname="Posts API" time="0.753">
    <system-out><![CDATA[
Scenario: Update a post with invalid ID using PUT                  # src/test/resources/features/posts.feature:55
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a PUT request to "/posts/9999" with body:            # com.example.demo.steps.ApiStepDefinitions.i_send_a_put_request_to_with_body(java.lang.String,java.lang.String)
  Then the response status code should be 500                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Delete a post with valid ID" classname="Posts API" time="0.707">
    <system-out><![CDATA[
Scenario: Delete a post with valid ID                              # src/test/resources/features/posts.feature:67
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a DELETE request to "/posts/1"                       # com.example.demo.steps.ApiStepDefinitions.i_send_a_delete_request_to(java.lang.String)
  Then the response status code should be 200                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Delete a post with invalid ID" classname="Posts API" time="0.758">
    <system-out><![CDATA[
Scenario: Delete a post with invalid ID                            # src/test/resources/features/posts.feature:72
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a DELETE request to "/posts/9999"                    # com.example.demo.steps.ApiStepDefinitions.i_send_a_delete_request_to(java.lang.String)
  Then the response status code should be 200                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Get all todos" classname="Todos API" time="0.092">
    <system-out><![CDATA[
Scenario: Get all todos                                            # src/test/resources/features/todos.feature:6
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a GET request to "/todos"                            # com.example.demo.steps.ApiStepDefinitions.i_send_a_get_request_to(java.lang.String)
  Then the response status code should be 200                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
  And the response should contain 200 items                        # com.example.demo.steps.ApiStepDefinitions.the_response_should_contain_items(java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Get todos by valid ID" classname="Todos API" time="0.111">
    <system-out><![CDATA[
Scenario: Get todos by valid ID                                    # src/test/resources/features/todos.feature:11
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a GET request to "/todos/1"                          # com.example.demo.steps.ApiStepDefinitions.i_send_a_get_request_to(java.lang.String)
  Then the response status code should be 200                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
  And the field "id" should equal 1                                # com.example.demo.steps.ApiStepDefinitions.the_field_should_equal_int(java.lang.String,java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Get todos by invalid ID" classname="Todos API" time="0.093">
    <system-out><![CDATA[
Scenario: Get todos by invalid ID                                  # src/test/resources/features/todos.feature:16
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a GET request to "/todos/9999"                       # com.example.demo.steps.ApiStepDefinitions.i_send_a_get_request_to(java.lang.String)
  Then the response status code should be 404                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Validate completed field is boolean" classname="Todos API" time="0.092">
    <system-out><![CDATA[
Scenario: Validate completed field is boolean                      # src/test/resources/features/todos.feature:20
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a GET request to "/todos/1"                          # com.example.demo.steps.ApiStepDefinitions.i_send_a_get_request_to(java.lang.String)
  Then the response status code should be 200                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
  And the field "completed" should equal "false"                   # com.example.demo.steps.ApiStepDefinitions.the_field_should_equal_string(java.lang.String,java.lang.String)
]]></system-out>
  </testcase>
  <testcase name="Get all users" classname="Users API" time="0.089">
    <system-out><![CDATA[
Scenario: Get all users                                            # src/test/resources/features/users.feature:6
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a GET request to "/users"                            # com.example.demo.steps.ApiStepDefinitions.i_send_a_get_request_to(java.lang.String)
  Then the response status code should be 200                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
  And the response should contain 10 items                         # com.example.demo.steps.ApiStepDefinitions.the_response_should_contain_items(java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Get user by valid ID" classname="Users API" time="0.095">
    <system-out><![CDATA[
Scenario: Get user by valid ID                                     # src/test/resources/features/users.feature:11
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a GET request to "/users/1"                          # com.example.demo.steps.ApiStepDefinitions.i_send_a_get_request_to(java.lang.String)
  Then the response status code should be 200                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
  And the field "id" should equal 1                                # com.example.demo.steps.ApiStepDefinitions.the_field_should_equal_int(java.lang.String,java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Get user by invalid ID" classname="Users API" time="0.708">
    <system-out><![CDATA[
Scenario: Get user by invalid ID                                   # src/test/resources/features/users.feature:16
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a GET request to "/users/9999"                       # com.example.demo.steps.ApiStepDefinitions.i_send_a_get_request_to(java.lang.String)
  Then the response status code should be 404                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
]]></system-out>
  </testcase>
  <testcase name="Validate required fields in user object" classname="Users API" time="0.102">
    <system-out><![CDATA[
Scenario: Validate required fields in user object                  # src/test/resources/features/users.feature:20
  Given the API base URL is "https://jsonplaceholder.typicode.com" # com.example.demo.steps.ApiStepDefinitions.the_api_base_url_is(java.lang.String)
  When I send a GET request to "/users/1"                          # com.example.demo.steps.ApiStepDefinitions.i_send_a_get_request_to(java.lang.String)
  Then the response status code should be 200                      # com.example.demo.steps.ApiStepDefinitions.the_response_status_code_should_be(java.lang.Integer)
  And the field "name" should not be null                          # com.example.demo.steps.ApiStepDefinitions.the_field_should_not_be_null(java.lang.String)
  And the field "username" should not be null                      # com.example.demo.steps.ApiStepDefinitions.the_field_should_not_be_null(java.lang.String)
  And the field "email" should not be null                         # com.example.demo.steps.ApiStepDefinitions.the_field_should_not_be_null(java.lang.String)
]]></system-out>
  </testcase>
</testsuite>